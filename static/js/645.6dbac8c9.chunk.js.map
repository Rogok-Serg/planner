{"version":3,"file":"static/js/645.6dbac8c9.chunk.js","mappings":"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","sources":["components/Modal/Modal.styled.js","components/Modal/Modal.jsx","redux/selectors.js","components/Pagination/Pagination.jsx","components/Modal/ModalEdit.jsx","components/Todolist/TodoItem/TodoItem.styled.js","components/Todolist/TodoItem/TodoItem.jsx","components/Todolist/TodoList.styled.js","components/Todolist/TodoList.jsx","page/TodoListPage/TodoListPage.styled.js","page/TodoListPage/TodoListPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 200;\n  width: 100%;\n  height: 100%;\n  background-attachment: fixed;\n  background: rgba(46, 47, 66, 0.4);\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    visibility 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const StyledModal = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  overflow: hidden;\n  padding: 45px 40px 40px 40px;\n  transform: translate(-50%, -50%);\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 2px rgba(0, 0, 0, 0.2),\n    0px 1px 1px rgba(0, 0, 0, 0.14);\n  border-radius: 24px;\n  background: #fff;\n`;\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const StyledClose = styled.button`\n  position: absolute;\n  border: none;\n  background: none;\n  border-radius: 16px;\n  top: 16px;\n  right: 16px;\n  font-size: 24px;\n  transition: background 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background: rgba(18, 20, 23, 0.1);\n  }\n`;\nexport const StyledButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  padding: 12px 50px;\n  margin-top: 28px;\n  border-radius: 12px;\n  background: #3470ff;\n  border: #fff;\n  color: #fff;\n  transition: background 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background: #0b44cd;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/operations';\nimport {\n  StyledModal,\n  StyledBackdrop,\n  StyledClose,\n  StyledForm,\n  StyledButton,\n} from './Modal.styled';\n\nconst Modal = ({ onClick }) => {\n  const [title, setTitle] = useState('');\n  const [completed, setCompleted] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handleInputData = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'title':\n        setTitle(value);\n        break;\n      case 'completed':\n        setCompleted(completed === false ? true : false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const createTask = taskList => {\n    const todo = {\n      ...taskList,\n    };\n    dispatch(addTask(todo));\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    createTask({ title, completed });\n    e.target.reset();\n    onClick();\n  };\n\n  document.addEventListener('keydown', e => {\n    if (e.key === 'Escape') onClick();\n  });\n\n  return (\n    <StyledBackdrop>\n      <StyledModal>\n        <StyledClose onClick={onClick}>&times;</StyledClose>\n        <h2>Please enter the task</h2>\n        <StyledForm onSubmit={handelSubmit}>\n          <div>\n            <div style={{ marginBottom: 20 }}>\n              <label\n                htmlFor=\"taskTitle\"\n                style={{ marginRight: 10, marginLeft: 10 }}\n              >\n                <span>Task</span>\n              </label>\n              <input\n                id=\"taskTitle\"\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Please enter the task\"\n                onChange={handleInputData}\n                required\n                value={title}\n              />\n            </div>\n            <div>\n              <label\n                htmlFor=\"taskCompleted\"\n                style={{ marginRight: 10, marginLeft: 10 }}\n              >\n                <span>Completed</span>\n              </label>\n              <input\n                id=\"taskCompleted\"\n                name=\"completed\"\n                onChange={handleInputData}\n                defaultValue={completed}\n                type=\"checkbox\"\n              />\n            </div>\n          </div>\n          <StyledButton type=\"submit\">Create task</StyledButton>\n        </StyledForm>\n      </StyledModal>\n    </StyledBackdrop>\n  );\n};\n\nexport default Modal;\n","export const selectTodo = state => state.todoStorage.tasks.items;\nexport const selectAllTodo = state => state.todoStorage.tasks.allItems;\nexport const selectUpdateTask = state => state.todoStorage.tasks.updateTask;\nexport const selectIsLoading = state => state.todoStorage.tasks.isLoading;\nexport const selectError = state => state.todoStorage.tasks.error;\n","import { Pagination } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { selectAllTodo } from 'redux/selectors';\n\nconst Paginations = ({ handleButton }) => {\n  const allTasks = useSelector(selectAllTodo);\n  return (\n    <Pagination defaultCurrent={1} onChange={handleButton} total={allTasks} />\n  );\n};\n\nexport default Paginations;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { editTask } from 'redux/operations';\nimport {\n  StyledModal,\n  StyledBackdrop,\n  StyledClose,\n  StyledForm,\n  StyledButton,\n} from './Modal.styled';\nimport { selectUpdateTask } from 'redux/selectors';\nimport { useState } from 'react';\n\nconst ModalEdit = ({ onClick }) => {\n  const getUpdateTask = useSelector(selectUpdateTask);\n  const { id, title, completed } = getUpdateTask;\n\n  const [completedTask, setCompletedTask] = useState(completed);\n  const dispatch = useDispatch();\n\n  const getUpdateTasks = dataTask => {\n    dispatch(editTask(dataTask));\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    const title = e.target.title.value;\n    const completed = e.target.completed.defaultChecked;\n\n    getUpdateTasks({ id, title, completed });\n    e.target.reset();\n    onClick();\n  };\n\n  document.addEventListener('keydown', e => {\n    if (e.key === 'Escape') onClick();\n  });\n\n  const closeBackground = event => {\n    event.target.tagName === 'DIV' && onClick();\n  };\n\n  return (\n    <StyledBackdrop onClick={event => closeBackground(event)}>\n      <StyledModal>\n        <StyledClose onClick={onClick}>&times;</StyledClose>\n        <h2>Please edit the task</h2>\n        <StyledForm onSubmit={handelSubmit}>\n          <div>\n            <div style={{ marginBottom: 20 }}>\n              <label\n                htmlFor=\"taskTitle\"\n                style={{ marginRight: 10, marginLeft: 10 }}\n              >\n                <span>Task</span>\n              </label>\n              <input\n                id=\"taskTitle\"\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Please edit the task\"\n                defaultValue={title}\n                required\n              />\n            </div>\n            <div>\n              <label\n                htmlFor=\"taskCompleted\"\n                style={{ marginRight: 10, marginLeft: 10 }}\n              >\n                <span>Completed</span>\n              </label>\n              <input\n                id=\"taskCompleted\"\n                onChange={() =>\n                  setCompletedTask(completed === false ? true : false)\n                }\n                name=\"completed\"\n                defaultChecked={completedTask}\n                type=\"checkbox\"\n              />\n            </div>\n          </div>\n          <StyledButton type=\"submit\">Edit task</StyledButton>\n        </StyledForm>\n      </StyledModal>\n    </StyledBackdrop>\n  );\n};\n\nexport default ModalEdit;\n","import styled from 'styled-components';\n\nexport const StyledItem = styled.li`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding-right: 30px;\n  border-bottom: 2px solid #000;\n  transition: background 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background: rgba(18, 20, 23, 0.1);\n  }\n`;\n\nexport const StyledWrapperInput = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nexport const StyledButton = styled.button`\n  color: #000;\n  border-radius: 5px;\n  transition: color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    background 300ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: #fff;\n    background: #0362fc;\n  }\n`;\n","import ModalEdit from 'components/Modal/ModalEdit';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTask } from 'redux/operations';\nimport { getUpdateTask } from 'redux/todoReducer';\nimport {\n  StyledItem,\n  StyledWrapperInput,\n  StyledButton,\n} from './TodoItem.styled';\n\nconst TodoItem = ({ item }) => {\n  const { id, title, completed } = item;\n  const dispatch = useDispatch();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleButtonDelete = taskId => dispatch(deleteTask(taskId));\n  const handleClosedModal = () => {\n    setIsOpen(false);\n  };\n  const editButton = editTask => {\n    dispatch(getUpdateTask(editTask));\n    setIsOpen(true);\n  };\n  return (\n    <StyledItem>\n      <StyledWrapperInput>\n        <label style={{ marginRight: 10, marginLeft: 10 }}>\n          <input type=\"checkbox\" checked={completed} readOnly />\n        </label>\n        <p style={{ marginRight: 10 }}>{title}</p>\n      </StyledWrapperInput>\n      <div>\n        <StyledButton\n          type=\"button\"\n          onClick={() => editButton({ id, title, completed })}\n        >\n          ✎\n        </StyledButton>\n        <StyledButton\n          style={{ marginLeft: 10, borderRadius: 50, width: 30 }}\n          type=\"button\"\n          onClick={() => handleButtonDelete(id)}\n        >\n          &times;\n        </StyledButton>\n      </div>\n      {isOpen && <ModalEdit onClick={handleClosedModal} />}\n    </StyledItem>\n  );\n};\n\nexport default TodoItem;\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul``;\n","import * as React from 'react';\nimport TodoItem from './TodoItem/TodoItem';\nimport { StyledList } from './TodoList.styled';\n\nconst TodoList = ({ taskList }) => {\n  return (\n    <div>\n      <StyledList>\n        {taskList.map(item => (\n          <TodoItem key={item.id} item={item} />\n        ))}\n      </StyledList>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import styled from 'styled-components';\n\nexport const StyledContainer = styled.div`\n  padding-right: 40px;\n`;\n\nexport const StyledTitle = styled.h1`\n  text-align: center;\n`;\n\nexport const StyledButtonCreate = styled.button`\n  padding: 20px 80px;\n  background: #50c0e6;\n  color: #000;\n  border-radius: 5px;\n  transition: color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    background 300ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: #fff;\n    background: #0362fc;\n  }\n`;\n\nexport const StyledBlockButton = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import Modal from 'components/Modal/Modal';\nimport Pagination from 'components/Pagination/Pagination';\nimport TodoList from 'components/Todolist/TodoList';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllTasks, paginationTodo } from 'redux/operations';\nimport { selectTodo } from 'redux/selectors';\nimport {\n  StyledContainer,\n  StyledTitle,\n  StyledButtonCreate,\n  StyledBlockButton,\n} from './TodoListPage.styled';\n\nconst TodoListPage = () => {\n  const taskList = useSelector(selectTodo);\n  const [page, setPage] = useState(1);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handleOpenModal = () => {\n    setIsOpen(true);\n  };\n  const handleClosedModal = () => {\n    setIsOpen(false);\n  };\n\n  const getTasks = useCallback(() => {\n    dispatch(paginationTodo());\n    dispatch(getAllTasks());\n  }, [dispatch]);\n\n  useEffect(() => {\n    getTasks();\n  }, [getTasks]);\n\n  const updateList = page => {\n    dispatch(paginationTodo(page));\n  };\n\n  const handleButton = page => {\n    setPage(page);\n    updateList(page);\n  };\n  return (\n    <StyledContainer>\n      <StyledTitle>Todo List</StyledTitle>\n      <StyledBlockButton>\n        <StyledButtonCreate onClick={handleOpenModal} type=\"button\">\n          + Create new task\n        </StyledButtonCreate>\n      </StyledBlockButton>\n\n      {isOpen && <Modal onClick={handleClosedModal} />}\n      <TodoList taskList={taskList} />\n      <Pagination page={page} handleButton={handleButton} taskList={taskList} />\n    </StyledContainer>\n  );\n};\n\nexport default TodoListPage;\n"],"names":["StyledBackdrop","styled","StyledModal","StyledForm","StyledClose","StyledButton","onClick","useState","title","setTitle","completed","setCompleted","dispatch","useDispatch","handleInputData","e","target","name","value","document","addEventListener","key","onSubmit","preventDefault","taskList","todo","addTask","createTask","reset","style","marginBottom","htmlFor","marginRight","marginLeft","id","type","placeholder","onChange","required","defaultValue","selectTodo","state","todoStorage","tasks","items","selectAllTodo","allItems","selectUpdateTask","updateTask","handleButton","allTasks","useSelector","defaultCurrent","total","getUpdateTask","completedTask","setCompletedTask","closeBackground","event","tagName","dataTask","defaultChecked","editTask","StyledItem","StyledWrapperInput","item","isOpen","setIsOpen","checked","readOnly","borderRadius","width","taskId","deleteTask","StyledList","map","StyledContainer","StyledTitle","StyledButtonCreate","StyledBlockButton","page","setPage","getTasks","useCallback","paginationTodo","getAllTasks","useEffect","Pagination","updateList"],"sourceRoot":""}